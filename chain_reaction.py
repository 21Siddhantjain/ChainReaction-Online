# -*- coding: utf-8 -*-
"""chain reaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nP1YRAMQyOByx1sXDcvMYy76emDHY2r4
"""

import numpy as np


"""FINAL CODE"""


class chain_reaction:
    def __init__(self, n):
        self.board = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [
                          0, 0], [0, 0], [0, 0], [0, 0]],
                      [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]
        self.row_length = len(self.board)
        self.col_length = len(self.board[0])

        self.moves = 0
        self.player_array = [0]*n

        self.start_game()

    def player_input(self, i, j, player):
        if(self.board[i][j][1] == player or self.board[i][j][1] == 0):
            self.moves = self.moves + 1
            self.update_move(i, j, player)
            if(self.moves > len(self.player_array)):
                if(self.check_if_won()):
                    print("Player ", player, "won")
        else:
            print("Inavlid Entry")
            return
        for i in range(self.row_length):
            for j in range(self.col_length):
                print(self.board[i][j], end="")
            print()

    def check_if_won(self):
        count = 0
        for i in range(len(self.player_array)):
            if(self.player_array[i] != 0):
                count += 1
                if count > 1:
                    break
        if(count > 1):
            return False
        else:
            return True

    def update_move(self, i, j, player):

        if((i < 0 or j < 0) or (i >= self.row_length or j >= self.col_length)):
            return

        if(self.board[i][j][1] != player):
            if(self.board[i][j][1] != 0):
                self.player_array[self.board[i][j][1] - 1] -= 1
            self.board[i][j][1] = player
            self.player_array[player - 1] += 1

        if((i != 0 and i != self.row_length-1) and (j != 0 and j != self.col_length-1)):
            if(self.board[i][j][0] == 3):
                self.board[i][j] = [0, 0]
                self.player_array[player - 1] -= 1

                self.update_move(i+1, j, player)
                self.update_move(i-1, j, player)
                self.update_move(i, j+1, player)
                self.update_move(i, j-1, player)
            else:
                self.board[i][j][0] += 1
        elif((i == 0 or i == self.row_length - 1) and (j == 0 or j == self.col_length - 1)):
            if(self.board[i][j][0] == 1):
                self.board[i][j] = [0, 0]
                self.player_array[player - 1] -= 1

                self.update_move(i+1, j, player)
                self.update_move(i-1, j, player)
                self.update_move(i, j+1, player)
                self.update_move(i, j-1, player)
            else:
                self.board[i][j][0] += 1
        else:
            if(self.board[i][j][0] == 2):
                self.board[i][j] = [0, 0]
                self.player_array[player - 1] -= 1

                self.update_move(i+1, j, player)
                self.update_move(i-1, j, player)
                self.update_move(i, j+1, player)
                self.update_move(i, j-1, player)
            else:
                self.board[i][j][0] += 1

    def is_game_over(self):
        count = 0
        for i in range(len(self.player_array)):
            if(self.player_array[i] != 0):
                count += 1
                if count > 1:
                    break
        if self.moves < len(self.player_array) or count > 1:
            return False
        else:
            return True

    def start_game(self):
        while(self.is_game_over() == False):
            iterator = 1
            while(iterator <= len(self.player_array)):
                if(self.if_player_can_continue(iterator)):
                    x = int(
                        input("Enter x coordinates for player {}:".format(iterator)))
                    if(x >= self.row_length):
                        x = int(input("WRONG ENTRY"))
                    y = int(
                        input("Enter y coordinates for player {}:".format(iterator)))
                    if(y >= self.col_length):
                        y = int(input("WRONG ENTRY"))
                    self.player_input(x, y, iterator)
                iterator += 1

    def if_player_can_continue(self, player):
        if(self.moves < len(self.player_array) or self.player_array[player-1] > 0):
            return True
        else:
            return False


cr = chain_reaction(3)
